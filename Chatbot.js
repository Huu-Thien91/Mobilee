import React, { useState, useMemo } from 'react';
import {
  View,
  Text,
  TextInput,
  ScrollView,
  TouchableOpacity,
  Modal,
  StyleSheet,
  PanResponder,
} from 'react-native';

const ChatBot = () => {
  const [isChatOpen, setIsChatOpen] = useState(false);
  const [isChatVisible, setIsChatVisible] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedAnswer, setSelectedAnswer] = useState('');
  const [position, setPosition] = useState({ x: 20, y: 500 });

  const faqs = [
    { question: 'Giao d·ªãch l·ªói...', answer: 'Vui l√≤ng ki·ªÉm tra th√¥ng tin giao d·ªãch.' },
    { question: 'Giao d·ªãch th√†nh c√¥ng nh∆∞ng kh√¥ng nh·∫≠n ƒë∆∞·ª£c...', answer: 'Li√™n h·ªá t·ªïng ƒë√†i h·ªó tr·ª£.' },
    { question: 'L·ªói n·∫°p ti·ªÅn t·ª´ ngu·ªìn li√™n k·∫øt...', answer: 'Ki·ªÉm tra th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng.' },
    { question: 'L√†m th·∫ø n√†o ƒë·ªÉ ƒëƒÉng k√Ω data g√≥i Kh√¥ng gi·ªõi h·∫°n?', answer: 'C√≥ c√°i n·ªãt ·∫•y, c√≥ l√†m m·ªõi c√≥ ƒÉn.' },
    { question: 'L√†m sao ƒë·ªÉ thay ƒë·ªïi m·∫≠t kh·∫©u t√†i kho·∫£n?', answer: 'V√†o ph·∫ßn c√†i ƒë·∫∑t t√†i kho·∫£n v√† ch·ªçn "ƒê·ªïi m·∫≠t kh·∫©u".' },
    { question: 'T·∫°i sao t√¥i kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p?', answer: 'Ki·ªÉm tra l·∫°i t√™n ng∆∞·ªùi d√πng v√† m·∫≠t kh·∫©u, ho·∫∑c th·ª≠ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.' },
    { question: 'L√†m sao ƒë·ªÉ ki·ªÉm tra dung l∆∞·ª£ng data c√≤n l·∫°i?', answer: 'V√†o ph·∫ßn "Data" trong ·ª©ng d·ª•ng ƒë·ªÉ ki·ªÉm tra s·ªë dung l∆∞·ª£ng c√≤n l·∫°i.' },
    { question: 'G√≥i c∆∞·ªõc 4G c·ªßa t√¥i ƒë√£ h·∫øt, t√¥i l√†m sao ƒë·ªÉ n·∫°p th√™m?', answer: 'B·∫°n c√≥ th·ªÉ n·∫°p ti·ªÅn qua c√°c h√¨nh th·ª©c chuy·ªÉn kho·∫£n ng√¢n h√†ng ho·∫∑c th·∫ª c√†o.' },
    { question: 'T√¥i c√≥ th·ªÉ h·ªßy g√≥i c∆∞·ªõc ƒëang s·ª≠ d·ª•ng kh√¥ng?', answer: 'C√≥ th·ªÉ h·ªßy g√≥i c∆∞·ªõc qua ·ª©ng d·ª•ng ho·∫∑c g·ªçi t·ªïng ƒë√†i ƒë·ªÉ y√™u c·∫ßu h·ªßy.' },
    { question: 'C√≥ th·ªÉ chuy·ªÉn ti·ªÅn t·ª´ t√†i kho·∫£n n√†y sang t√†i kho·∫£n kh√°c kh√¥ng?', answer: 'B·∫°n c√≥ th·ªÉ chuy·ªÉn ti·ªÅn b·∫±ng c√°ch s·ª≠ d·ª•ng d·ªãch v·ª• chuy·ªÉn ti·ªÅn tr·ª±c tuy·∫øn ho·∫∑c qua ng√¢n h√†ng.' },
    { question: 'T·∫°i sao t√¥i kh√¥ng th·ªÉ thanh to√°n qua th·∫ª t√≠n d·ª•ng?', answer: 'C√≥ th·ªÉ do l·ªói h·ªá th·ªëng c·ªßa ng√¢n h√†ng ho·∫∑c th·∫ª t√≠n d·ª•ng c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t.' },
    { question: 'T·∫°i sao d·ªãch v·ª• c·ªßa t√¥i kh√¥ng ho·∫°t ƒë·ªông sau khi n·∫°p ti·ªÅn?', answer: 'Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá v·ªõi b·ªô ph·∫≠n h·ªó tr·ª£.' },
    { question: 'T√¥i c√≥ th·ªÉ mua th·∫ª ƒëi·ªán tho·∫°i qua ·ª©ng d·ª•ng n√†y kh√¥ng?', answer: 'C√≥, b·∫°n c√≥ th·ªÉ mua th·∫ª ƒëi·ªán tho·∫°i tr·ª±c ti·∫øp trong ·ª©ng d·ª•ng.' },
    { question: 'T√¥i c√≥ th·ªÉ s·ª≠ d·ª•ng nhi·ªÅu g√≥i c∆∞·ªõc c√πng l√∫c kh√¥ng?', answer: 'Kh√¥ng, ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng m·ªôt g√≥i c∆∞·ªõc t·∫°i m·ªôt th·ªùi ƒëi·ªÉm.' },
    { question: 'C√≥ c√°ch n√†o nh·∫≠n th√¥ng b√°o khi c√≥ khuy·∫øn m√£i kh√¥ng?', answer: 'B·∫°n c√≥ th·ªÉ b·∫≠t th√¥ng b√°o trong ph·∫ßn c√†i ƒë·∫∑t ƒë·ªÉ nh·∫≠n c√°c th√¥ng tin khuy·∫øn m√£i m·ªõi nh·∫•t.' },
    { question: 'L√†m sao ƒë·ªÉ xem l·ªãch s·ª≠ giao d·ªãch?', answer: 'V√†o m·ª•c "L·ªãch s·ª≠ giao d·ªãch" trong ·ª©ng d·ª•ng ƒë·ªÉ xem chi ti·∫øt c√°c giao d·ªãch ƒë√£ th·ª±c hi·ªán.' },
    { question: 'T·∫°i sao t√¥i kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£ OTP ƒë·ªÉ x√°c th·ª±c?', answer: 'H√£y ch·∫Øc ch·∫Øn r·∫±ng b·∫°n ƒë√£ nh·∫≠p ƒë√∫ng s·ªë ƒëi·ªán tho·∫°i v√† ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.' },
    { question: 'T√¥i c√≥ th·ªÉ s·ª≠ d·ª•ng m√£ gi·∫£m gi√° ·ªü ƒë√¢u?', answer: 'M√£ gi·∫£m gi√° c√≥ th·ªÉ ƒë∆∞·ª£c nh·∫≠p t·∫°i ph·∫ßn thanh to√°n trong ·ª©ng d·ª•ng.' },
    { question: 'L√†m sao ƒë·ªÉ li√™n h·ªá v·ªõi t·ªïng ƒë√†i h·ªó tr·ª£?', answer: 'B·∫°n c√≥ th·ªÉ g·ªçi s·ªë hotline ho·∫∑c g·ª≠i email cho b·ªô ph·∫≠n h·ªó tr·ª£ kh√°ch h√†ng.' },
    { question: '·ª®ng d·ª•ng n√†y c√≥ h·ªó tr·ª£ ti·∫øng Anh kh√¥ng?', answer: 'C√≥, b·∫°n c√≥ th·ªÉ chuy·ªÉn ng√¥n ng·ªØ trong ph·∫ßn c√†i ƒë·∫∑t.' },
    { question: 'T·∫°i sao t√¥i kh√¥ng th·ªÉ t·∫£i ·ª©ng d·ª•ng v·ªÅ m√°y?', answer: 'H√£y ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ho·∫∑c th·ª≠ t·∫£i l·∫°i t·ª´ App Store/Google Play.' },
    { question: 'C√≥ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i n√†o ƒëang di·ªÖn ra kh√¥ng?', answer: 'B·∫°n c√≥ th·ªÉ theo d√µi c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i tr√™n trang ch·ªß ·ª©ng d·ª•ng.' },
    { question: 'L√†m sao ƒë·ªÉ c·∫≠p nh·∫≠t ·ª©ng d·ª•ng?', answer: 'B·∫°n c√≥ th·ªÉ c·∫≠p nh·∫≠t ·ª©ng d·ª•ng th√¥ng qua App Store ho·∫∑c Google Play.' },
    { question: 'L√†m th·∫ø n√†o ƒë·ªÉ h·ªßy ƒëƒÉng k√Ω nh·∫≠n th√¥ng b√°o?', answer: 'B·∫°n c√≥ th·ªÉ t·∫Øt th√¥ng b√°o trong ph·∫ßn c√†i ƒë·∫∑t c·ªßa ·ª©ng d·ª•ng.' },
    { question: 'T√¥i c√≥ th·ªÉ thanh to√°n b·∫±ng h√¨nh th·ª©c n√†o?', answer: '·ª®ng d·ª•ng h·ªó tr·ª£ thanh to√°n qua th·∫ª t√≠n d·ª•ng, chuy·ªÉn kho·∫£n ng√¢n h√†ng v√† v√≠ ƒëi·ªán t·ª≠.' },
    { question: 'T·∫°i sao t√¥i b·ªã t√≠nh ph√≠ qu√° cao?', answer: 'Ki·ªÉm tra l·∫°i g√≥i c∆∞·ªõc v√† c√°c d·ªãch v·ª• m√† b·∫°n ƒë√£ ƒëƒÉng k√Ω ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng ph√°t sinh ph√≠ ngo√†i √Ω mu·ªën.' },
    { question: 'G√≥i c∆∞·ªõc c·ªßa t√¥i c√≥ bao nhi√™u data?', answer: 'M·ªói g√≥i c∆∞·ªõc s·∫Ω c√≥ dung l∆∞·ª£ng data kh√°c nhau, b·∫°n c√≥ th·ªÉ xem chi ti·∫øt trong ph·∫ßn "G√≥i c∆∞·ªõc" c·ªßa ·ª©ng d·ª•ng.' },
    { question: 'L√†m sao ƒë·ªÉ li√™n h·ªá v·ªõi b·ªô ph·∫≠n h·ªó tr·ª£?', answer: 'B·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi b·ªô ph·∫≠n h·ªó tr·ª£ qua email, hotline ho·∫∑c tr√≤ chuy·ªán tr·ª±c ti·∫øp trong ·ª©ng d·ª•ng.' },
    { question: 'C√≥ th·ªÉ ho√†n ti·ªÅn n·∫øu t√¥i h·ªßy g√≥i c∆∞·ªõc kh√¥ng?', answer: 'T√πy thu·ªôc v√†o ch√≠nh s√°ch c·ªßa nh√† cung c·∫•p, b·∫°n c√≥ th·ªÉ y√™u c·∫ßu ho√†n ti·ªÅn trong m·ªôt s·ªë tr∆∞·ªùng h·ª£p nh·∫•t ƒë·ªãnh.' },
    { question: 'T·∫°i sao t√¥i kh√¥ng th·ªÉ s·ª≠ d·ª•ng d·ªãch v·ª• sau khi thanh to√°n?', answer: 'C√≥ th·ªÉ do l·ªói h·ªá th·ªëng, vui l√≤ng li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£ ƒë·ªÉ ƒë∆∞·ª£c gi·∫£i quy·∫øt.' },
    { question: 'T√¥i c√≥ th·ªÉ ƒë·ªïi t√™n ng∆∞·ªùi d√πng kh√¥ng?', answer: 'Hi·ªán t·∫°i, b·∫°n kh√¥ng th·ªÉ thay ƒë·ªïi t√™n ng∆∞·ªùi d√πng sau khi ƒë√£ ƒëƒÉng k√Ω.' },
    { question: 'L√†m th·∫ø n√†o ƒë·ªÉ nh·∫≠n h·ªó tr·ª£ kh·∫©n c·∫•p?', answer: 'Li√™n h·ªá v·ªõi t·ªïng ƒë√†i ho·∫∑c s·ª≠ d·ª•ng t√≠nh nƒÉng h·ªó tr·ª£ kh·∫©n c·∫•p trong ·ª©ng d·ª•ng.' },
    { question: 'C√≥ th·ªÉ l·∫•y l·∫°i t√†i kho·∫£n ƒë√£ b·ªã kh√≥a kh√¥ng?', answer: 'B·∫°n c·∫ßn li√™n h·ªá v·ªõi b·ªô ph·∫≠n h·ªó tr·ª£ ƒë·ªÉ y√™u c·∫ßu m·ªü kh√≥a t√†i kho·∫£n.' },
    { question: 'C√≥ h·ªó tr·ª£ b·∫£o m·∫≠t 2 l·ªõp kh√¥ng?', answer: 'C√≥, b·∫°n c√≥ th·ªÉ b·∫≠t b·∫£o m·∫≠t 2 l·ªõp trong ph·∫ßn c√†i ƒë·∫∑t t√†i kho·∫£n.' }
];

const categories = [
  { name: 'G√≥i ∆∞u ƒë√£i', icon: '‚úÖ' },
  { name: 'ƒêƒÉng k√Ω, ƒë·ªãnh danh', icon: 'üì∑' },
  { name: 'N·∫°p, r√∫t ti·ªÅn', icon: 'üí≥' },
  { name: 'Li√™n h·ªá t·ªïng ƒë√†i', icon: 'üñï' },
  { name: 'Khuy·∫øn m√£i', icon: 'üéâ' },
  { name: 'T√†i kho·∫£n c·ªßa t√¥i', icon: 'üë§' },
  { name: 'L·ªãch s·ª≠ giao d·ªãch', icon: 'üìù' },
  { name: 'C√†i ƒë·∫∑t', icon: '‚öôÔ∏è' },
  { name: 'Mua th·∫ª ƒëi·ªán tho·∫°i', icon: 'üì±' },
  { name: 'G√≥i c∆∞·ªõc 4G', icon: 'üì∂' },
  { name: 'H·ªó tr·ª£ kh√°ch h√†ng', icon: 'üßë‚Äçüíª' },
  { name: 'Qu·∫£n l√Ω th√¥ng b√°o', icon: 'üîî' },
  { name: 'Xem s·∫£n ph·∫©m', icon: 'üõí' },
  { name: 'Ch√≠nh s√°ch b·∫£o m·∫≠t', icon: 'üîí' },
  { name: 'C·∫≠p nh·∫≠t ·ª©ng d·ª•ng', icon: 'üîÑ' },
  { name: 'ƒê·ªïi m·∫≠t kh·∫©u', icon: 'üîë' },
  { name: 'H·ªó tr·ª£ thanh to√°n', icon: 'üí∏' },
  { name: 'L·ªãch s·ª≠ ƒë∆°n h√†ng', icon: 'üì¶' },
  { name: 'T√¨m ki·∫øm s·∫£n ph·∫©m', icon: 'üîç' },
  { name: 'ƒê√°nh gi√° d·ªãch v·ª•', icon: '‚≠ê' },
  { name: 'Gi·ªõi thi·ªáu b·∫°n b√®', icon: 'üëØ‚Äç‚ôÇÔ∏è' },
  { name: 'ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng', icon: 'üìú' },
  { name: 'G√≥i d·ªãch v·ª• gia ƒë√¨nh', icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶' },
  { name: 'Ch√≠nh s√°ch ƒë·ªïi tr·∫£', icon: 'üîÑ' },
  { name: 'G√≥i c∆∞·ªõc sinh vi√™n', icon: 'üéì' },
  { name: 'L·ªãch s·ª≠ khi·∫øu n·∫°i', icon: 'üìë' },
  { name: 'ƒêi·ªÅu ki·ªán v√† quy ƒë·ªãnh', icon: 'üìã' },
  { name: 'Li√™n k·∫øt t√†i kho·∫£n', icon: 'üîó' },
  { name: 'ƒêƒÉng xu·∫•t', icon: 'üö™' },
  { name: 'H·ªó tr·ª£ k·ªπ thu·∫≠t', icon: 'üõ†Ô∏è' },
  { name: 'L·ªãch s·ª≠ ƒëƒÉng nh·∫≠p', icon: '‚å®Ô∏è' }
];


  // S·ª≠ d·ª•ng useMemo ƒë·ªÉ t·ªëi ∆∞u h√≥a vi·ªác l·ªçc c√°c c√¢u h·ªèi
  const filteredFaqs = useMemo(() => {
    return faqs.filter(faq =>
      faq.question.toLowerCase().includes(searchQuery.toLowerCase())
    );
  }, [searchQuery]);

  // PanResponder
  const panResponder = PanResponder.create({
    onStartShouldSetPanResponder: () => true,
    onPanResponderMove: (_, gestureState) => {
      // C·∫≠p nh·∫≠t v·ªã tr√≠ c·ªßa ChatBot theo s·ª± thay ƒë·ªïi c·ªßa gestureState
      setPosition((prevPosition) => ({
        x: prevPosition.x + gestureState.dx, // Th√™m s·ª± thay ƒë·ªïi theo chi·ªÅu x
        y: prevPosition.y + gestureState.dy, // Th√™m s·ª± thay ƒë·ªïi theo chi·ªÅu y
      }));
    },
    onPanResponderRelease: (_, gestureState) => {
      // Khi k·∫øt th√∫c di chuy·ªÉn, ti·∫øp t·ª•c c·∫≠p nh·∫≠t v·ªã tr√≠
      setPosition((prevPosition) => ({
        x: prevPosition.x + gestureState.dx,
        y: prevPosition.y + gestureState.dy,
      }));
    },
  });

  return (
    <>
      {/* Hi·ªÉn th·ªã bong b√≥ng ChatBot n·∫øu tr·∫°ng th√°i isChatVisible l√† true */}
      {isChatVisible && (
        <View
          style={[styles.chatBubble, { top: position.y, left: position.x }]} // S·ª≠ d·ª•ng position trong style
          {...panResponder.panHandlers}
        >
          <TouchableOpacity onPress={() => setIsChatOpen(true)}>
            <Text style={styles.chatBubbleText}>üí¨</Text>
          </TouchableOpacity>
          {/* N√∫t t·∫Øt bong b√≥ng chat */}
          <TouchableOpacity
            style={styles.closeBubbleButton}
            onPress={() => setIsChatVisible(false)}
          >
            <Text style={styles.closeBubbleText}>‚úñ</Text>
          </TouchableOpacity>
        </View>
      )}

      {/* Chat Modal */}
      <Modal
        animationType="slide"
        transparent={true}
        visible={isChatOpen}
        onRequestClose={() => {
          setIsChatOpen(false);
          setSelectedAnswer('');
        }}
      >
        <View style={styles.modalContainer}>
          <View style={styles.chatContainer}>
            <Text style={styles.headerText}>Trung t√¢m h·ªó tr·ª£</Text>

            {/* Banner */}
            <View style={styles.banner}>
              <Text style={styles.bannerText}>
                B·∫°n kh√¥ng th·ªÉ th·ª±c hi·ªán giao d·ªãch online khi ch∆∞a ho√†n th√†nh c·∫≠p nh·∫≠t th√¥ng tin!
              </Text>
              <TouchableOpacity style={styles.bannerButton}>
                <Text style={styles.bannerButtonText}>Th·ª±c hi·ªán ngay</Text>
              </TouchableOpacity>
            </View>

            {/* Search Bar */}
            <TextInput
              style={styles.searchBar}
              placeholder="T√¨m ki·∫øm c√°c v·∫•n ƒë·ªÅ c·ªßa b·∫°n"
              value={searchQuery}
              onChangeText={setSearchQuery}
            />

            {/* FAQ Section */}
            <ScrollView>
              <Text style={styles.sectionHeader}>C√¢u h·ªèi th∆∞·ªùng g·∫∑p</Text>
              {filteredFaqs.map((faq, index) => (
                <TouchableOpacity
                  key={index}
                  style={styles.faqItem}
                  onPress={() => setSelectedAnswer(faq.answer)}
                >
                  <Text style={styles.faqText}>{faq.question}</Text>
                </TouchableOpacity>
              ))}

              {/* Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi */}
              {selectedAnswer && (
                <View style={styles.answerBox}>
                  <Text style={styles.answerText}>{selectedAnswer}</Text>
                </View>
              )}

              {/* Categories */}
              <Text style={styles.sectionHeader}>Tr·ª£ gi√∫p theo ch·ªß ƒë·ªÅ</Text>
              <View style={styles.categoryContainer}>
                {categories.map((category, index) => (
                  <View key={index} style={styles.category}>
                    <Text style={styles.categoryIcon}>{category.icon}</Text>
                    <Text style={styles.categoryText}>{category.name}</Text>
                  </View>
                ))}
              </View>
            </ScrollView>

            {/* N√∫t ƒë√≥ng */}
            <TouchableOpacity
              style={styles.closeButton}
              onPress={() => {
                setIsChatOpen(false);
                setSelectedAnswer('');
              }}
            >
              <Text style={styles.closeButtonText}>ƒê√≥ng</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </>
  );
};

const styles = StyleSheet.create({
  // Styles remain the same
  chatBubble: {
    position: 'absolute',
    backgroundColor: '#6200ee',
    width: 60,
    height: 60,
    borderRadius: 30,
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 5,
  },
  chatBubbleText: {
    color: 'white',
    fontSize: 24,
  },
  closeBubbleButton: {
    position: 'absolute',
    top: -10,
    right: -10,
    backgroundColor: '#ff4d4d',
    width: 20,
    height: 20,
    borderRadius: 10,
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 5,
  },
  closeBubbleText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
  },
  modalContainer: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
  },
  chatContainer: {
    flex: 1,
    backgroundColor: 'white',
    borderRadius: 10,
    marginTop: 50,
    padding: 20,
  },
  headerText: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10,
    textAlign: 'center',
  },
  banner: {
    backgroundColor: '#ffe5e5',
    padding: 10,
    borderRadius: 5,
    marginBottom: 10,
  },
  bannerText: {
    fontSize: 14,
    color: '#d32f2f',
  },
  bannerButton: {
    backgroundColor: '#d32f2f',
    borderRadius: 5,
    marginTop: 10,
    padding: 5,
    alignItems: 'center',
  },
  bannerButtonText: {
    color: 'white',
  },
  searchBar: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
    padding: 10,
    marginBottom: 10,
  },
  sectionHeader: {
    fontSize: 18,
    fontWeight: 'bold',
    marginVertical: 10,
  },
  faqItem: {
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  faqText: {
    fontSize: 16,
  },
  answerBox: {
    backgroundColor: '#f5f5f5',
    padding: 10,
    borderRadius: 5,
    marginTop: 10,
  },
  answerText: {
    fontSize: 14,
    color: '#555',
  },
  categoryContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  category: {
    width: '30%',
    alignItems: 'center',
    marginVertical: 10,
  },
  categoryIcon: {
    fontSize: 32,
  },
  categoryText: {
    textAlign: 'center',
    marginTop: 5,
  },
  closeButton: {
    backgroundColor: '#6200ee',
    padding: 10,
    borderRadius: 5,
    marginTop: 10,
  },
  closeButtonText: {
    color: 'white',
    textAlign: 'center',
    fontSize: 16,
  },
});

export default ChatBot;
